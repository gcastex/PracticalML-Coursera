{
  "name": "Practicalml-coursera",
  "tagline": "",
  "body": "#Report for the final project in the Practical Machine Learning Course on Coursera\r\n\r\n## Reading the Data\r\nRead the training and testing files, and split the training data into training and validation sets.\r\n\r\n    library(caret)\r\n    data<-read.csv(\"pml-training.csv\", stringsAsFactors=FALSE)\r\n    inTrain <- createDataPartition(data$classe, p=0.70, list=FALSE)\r\n    training <- data[inTrain,]\r\n    validation <- data[-inTrain,]\r\n    \r\n    testing<-read.csv(\"pml-testing.csv\")\r\n\r\n## Formatting data\r\nBasic exploration of the data shows that most columns contains mainly NA values.\r\nThe first columns contain date and time information, which should be irrelevant to the analysis. We remove the time columns and the columns containing NA values. 53 columns variables remain in the dataset.\r\n\r\n    ## EXTRACT CLASSE INFORMATION\r\n    data<-subset(training,  select = -c(classe))\r\n\r\n    ## REMOVE TIME INFORMATION\r\n    data<-data[,-c(1:5)]\r\n\r\n    ## SAVE COLUMN NAMES\r\n    datnames<-names(data)\r\n  \r\n    ## CONVERT REMAINING VALUES TO NUMERIC\r\n    temp<-lapply(data, as.numeric)\r\n    data<-data.frame(matrix(unlist(temp), ncol=ncol(data)))\r\n\r\n    ## REMOVE COLUMNS CONTAINING NA VALUES\r\n    colindices<-which(colSums(is.na(data))==0)\r\n    data<-data[,colindices]\r\n    names(data)<-datnames[colindices]\r\n    data<-cbind(classe=training$classe, data)\r\n\r\n## Model fitting\r\n\r\nThe model used is Random Forest with cross-validation. Parallelisation is also used to speed up the computation time. Cross-validation and parallelisation options are defined using the trainControl command.\r\n\r\n    ## PARALLEL AND CROSS-VALIDATION OPTIONS\r\n    library(parallel)\r\n    library(doParallel)\r\n    cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS\r\n    registerDoParallel(cluster)\r\n    fitControl <- trainControl(method = \"cv\",\r\n                               number = 10,\r\n                               allowParallel = TRUE)\r\n\r\n    ## TRAINING  \r\n    modelFit<-train(classe~., method=\"rf\", data=data, trControl=fitControl)\r\n\r\n    ## SAVE THE MODEL\r\n    save(modelFit,file=\"rfFit.RData\")\r\n\r\n\r\n## Test the model on the validation dataset\r\n\r\nThe validation dataset is used to predict the out-of-sample accuracy of the model. As such, we preprocess the validation dataset in the same way as the training dataset by converting its values to numeric, and we apply the model to it.\r\n\r\n    ## CONVERT TO NUMERIC\r\n    temp<-lapply(subset(validation, select=-c(classe)), as.numeric)\r\n    valclasse<-validation$classe\r\n    valnames<-names(temp)\r\n    validation<-data.frame(matrix(unlist(temp), ncol=ncol(validation)-1))\r\n    names(validation)<-valnames\r\n    validation<-cbind(classe=valclasse, validation)\r\n\r\n    ## LOAD THE MODEL (IF NOT ALREADY IN MEMORY)\r\n    load(file = \"rfFit.RData\")\r\n\r\n    ## PREDICTIONS FOR VALIDATION SET \r\n    valpreds<-predict(modelFit, newdata=validation)\r\n\r\nWe use the command confusionMatrix to get detailed information on the model accuracy on the validation set.\r\n\r\n    confusionMatrix(valpreds, validation$classe)\r\n\r\nThis gives us an estimate of the out-of sample accuracy of: 0.9993. \r\nThe confusion matrix is represented below.\r\n\r\n|            | Reference |    A |    B |    C |    D |    E |\r\n|------------|-----------|-----:|-----:|-----:|-----:|-----:|\r\n| Prediction |           |      |      |      |      |      |\r\n| A          |           | 1674 |    1 |    0 |    0 |    0 |\r\n| B          |           |    0 | 1138 |    1 |    0 |    0 |\r\n| C          |           |    0 |    0 | 1025 |    1 |    0 |\r\n| D          |           |    0 |    0 |    0 |  963 |    1 |\r\n| E          |           |    0 |    0 |    0 |    0 | 1081 |\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}